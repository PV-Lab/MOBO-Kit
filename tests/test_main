import numpy as np
import pandas as pd
from src.utils import x_normalizer, x_denormalizer
from src.model import fit_gp_models
import torch

def test_x_normalizer_and_denormalizer():
    X = np.array([[1, 10], [2, 20], [3, 30]])
    var_array = [X[:, i] for i in range(X.shape[1])]

    X_norm = x_normalizer(X, var_array)
    X_denorm = x_denormalizer(X_norm, var_array)

    assert np.allclose(X, X_denorm, atol=1e-6), "Denormalization mismatch"

def test_fit_gp_models_on_mock_data():
    # Create mock input and output
    X = torch.linspace(0, 1, 10).unsqueeze(-1).repeat(1, 3)  # shape (10, 3)
    Y = torch.stack([
        torch.sin(X[:, 0]),
        torch.cos(X[:, 1]),
        torch.exp(-X[:, 2])
    ], dim=1)  # shape (10, 3)

    model = fit_gp_models(X, Y)

    assert len(model.models) == 3, "Should fit 3 independent GP models"
    assert all(hasattr(m, 'forward') for m in model.models), "Each model should be a GP"

def test_pipeline_with_fake_data(tmp_path):
    # Fake dataset with 8 features and 3 outputs
    df = pd.DataFrame(np.random.rand(10, 11), columns=[f"x{i}" for i in range(8)] + ['PCE', 'Stability', 'Repeatability'])

    # Save mock CSV to a temp location
    test_file = tmp_path / "batch0_results.csv"
    df.to_csv(test_file, index=False)

    # Load and run pipeline manually
    from src.run_pipeline import preprocess_data, run_model

    X = df.iloc[:, 0:8].values
    y = df[['PCE', 'Stability', 'Repeatability']].values

    X_norm = preprocess_data(X)
    Y_scaled, model = run_model(X_norm, y)

    assert Y_scaled.shape == (10, 3), "Output should match shape of target data"